---------------------HTML---------------------

<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="preconnect" href="https://fonts.googleapis.com">
     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
     <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
     <link rel="stylesheet" href="style.css">
     <title>Whack a mole</title>
</head>
<body>
     <div class="container">
          <h1>Whack a mole</h1>
          <div class="score-timeLeft-container">
               <p>Score:<h3 id="score"></h3></p>
               <p>Time Left:<h3 id="time-left"></h3></p>
          </div>
          <div id="grid">
               <div class="square"></div>
               <div class="square"></div>
               <div class="square"></div>
               <div class="square"></div>
               <div class="square mole">
                    <img src="mole.png" id="mole-img">
               </div>
               <div class="square"></div>
               <div class="square"></div>
               <div class="square"></div>
               <div class="square"></div>
          </div>
          <div class="buttons">
               <button id="start">Start</button>
               <button id="reset">Reset</button>
          </div>
     </div>
     <script src="script.js"></script>
</body>
</html>

---------------------CSS---------------------

*{
     margin: 0;
     padding: 0;
     box-sizing: border-box;
     font-family: 'Poppins', sans-serif;
     color: #072227;
}
body{
     height: 100vh;
     width: 100vw;
     display: grid;
     place-content: center;
     background-color: #aaa;
}
.container{
     display: flex;
     flex-direction: column;
     justify-content: center;
     align-items: center;
     gap: 1rem;
}
.container h1{
     letter-spacing: 5px;
}
.score-timeLeft-container{
     width: 100%;
     display: flex;
     justify-content: space-between;
     align-items: center;
     font-size: 1.3rem;
     font-weight: 600;
}
#grid{
     display: grid;
     grid-template-columns: repeat(3, 100px);
     grid-template-rows: repeat(3, 100px);
     grid-row-gap: 1rem;
     grid-column-gap: 1rem;
}
.square{
     box-shadow: inset -5px -5px 9px #eee,
      inset 5px 5px 9px #222;
      border-radius: 5px;
}
img{
     width: 100%;
     height: 100%;
}
.buttons{
     width: 100%;
     display: flex;
     justify-content: space-between;
}
button{
     width: 140px;
     height: 40px;
     border-radius: 5px;
     border: none;
     background: transparent;
     box-shadow:inset 5px 5px 7px #ddd,
      inset -5px -5px 7px #000;
     font-weight: 600;
      cursor: pointer;
      font-size: 1.2rem;
}

---------------------JavaScript---------------------

const score = document.getElementById('score');
const timeLeft = document.getElementById('time-left');
const squares = document.querySelectorAll('.square');
const start = document.getElementById('start');
const reset = document.getElementById('reset');
const grid = document.getElementById('grid');

let moleInterval;
let scoreCounter = 0;
let gameTimer;
let gameTimeCount = 15;
let gameStarted = false;
const showMole = `<img src="mole.png" id="mole-img">`;

//set random location of the mole
const randomizeMole = () => {
     let mole = document.querySelector('.mole');
     mole.classList.remove('mole');
     mole.innerHTML = '';
     let randomSquare = squares[Math.floor(Math.random() * squares.length)]
     randomSquare.classList.add('mole');
     randomSquare.innerHTML = showMole;
}

//set time interval when game starts;
const startGame = () => {
     if (!gameStarted) {
          gameStarted = true;
          scoreCounter = 0;
          moleInterval = setInterval(_ => {
               randomizeMole();
          }, 1000);
          gameTimer = setInterval(_ => {
               gameTimeCount--;
               timeLeft.innerHTML = gameTimeCount + "s";
               checkGameTimer();

          }, 1000)
     }
}

//check timeout of the game
const checkGameTimer = () => {
     if (gameTimeCount === 0) {
          clearInterval(gameTimer);
          clearInterval(moleInterval);
          gameStarted = false;
          gameTimeCount = 15;
     }
}
//count score
const countScore = () => {
     if(gameStarted){
          scoreCounter++;
          score.innerHTML = scoreCounter;
     }
}

//Reset the game
const resetGame = () => {
     clearInterval(moleInterval);
     clearInterval(gameTimer);
     scoreCounter = 0;
     gameTimeCount = 15;
     timeLeft.innerHTML = gameTimeCount + "s";
     score.innerHTML = scoreCounter;
     gameStarted = false;
}

//start the game when start button is clicked;
start.addEventListener('click', startGame);
grid.addEventListener('click', (e) => {
     if (e.target.parentElement.classList.contains('mole'))
          countScore();
})
reset.addEventListener('click', resetGame);